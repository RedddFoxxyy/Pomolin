# .github/workflows/build.yml
# This workflow builds, packages, and creates a draft release for the application on Windows (x64),
# macOS (x64, arm64), and Linux (x64, arm64).

name: Build and Release

on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      # Do not cancel other jobs if one fails
      fail-fast: false
      matrix:
        include:
          # Linux Builds
          - os: ubuntu-latest
            arch: "x64"
            runner: "ubuntu-latest"
            gradle_task: "packageReleaseDeb"
          - os: ubuntu-24.04-arm
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            gradle_task: "packageReleaseDeb"

          # macOS Builds
          - os: macos-13
            arch: "x64"
            # Explicitly use an Intel-based runner for the x64 build
            runner: "macos-13"
            gradle_task: "packageReleaseDmg packageReleasePkg"
          - os: macos-latest
            arch: "arm64"
            # macos-14 is an Apple Silicon runner, required for native arm64 builds.
            runner: "macos-14"
            gradle_task: "packageReleaseDmg packageReleasePkg"

          # Windows Builds
          - os: windows-latest
            arch: "x64"
            runner: "windows-latest"
            gradle_task: "packageReleaseMsi packageReleaseExe"
          - os: windows-11-arm
            arch: "arm64"
            runner: "windows-11-arm"
            gradle_task: "packageReleaseMsi packageReleaseExe"

    # Run on the runner specified in the matrix
    runs-on: ${{ matrix.runner }}

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the Java Development Kit (JDK) for the target architecture
      - name: Set up JDK 21 for ${{ matrix.arch }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          architecture: ${{ matrix.arch }}

      # 3. Grant execute permission to the Gradle wrapper (for macOS and Linux)
      - name: Grant execute permission for gradlew
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      # 4. Build the application using Gradle, targeting the specific architecture
      - name: Build with Gradle on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: ./gradlew.bat -Pcompose.desktop.target.arch=${{ matrix.arch }} -Pproject.archivesBaseName=pomolin-windows-${{ matrix.arch }} ${{ matrix.gradle_task }} packageReleaseUberJarForCurrentOS

      - name: Build with Gradle on Linux/macOS
        if: runner.os != 'Windows'
        run: ./gradlew -Pcompose.desktop.target.arch=${{ matrix.arch }} -Pproject.archivesBaseName=pomolin-${{ matrix.os }}-${{ matrix.arch }} ${{ matrix.gradle_task }} packageReleaseUberJarForCurrentOS

      # 5. Upload the built packages as an artifact for the release job
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ runner.os }}-${{ matrix.arch }}
          path: |
            composeApp/build/compose/binaries/main-release/deb/*.deb
            composeApp/build/compose/binaries/main-release/dmg/*.dmg
            composeApp/build/compose/binaries/main-release/pkg/*.pkg
            composeApp/build/compose/binaries/main-release/msi/*.msi
            composeApp/build/compose/binaries/main-release/exe/*.exe
            composeApp/build/compose/jars/*.jar
          retention-days: 1

  release:
    # This job runs only after all jobs in the 'build' matrix have successfully completed.
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # This permission is required by softprops/action-gh-release to create a release
      contents: write

    steps:
      # 1. Download all artifacts from the completed build jobs
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # The destination path for all downloaded artifacts.
          # Each artifact will be in its own directory.
          path: artifacts

      # 2. Create a single Draft Release and upload all packages
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          # This creates a draft release, so it's not published automatically.
          draft: true
          # The tag name is based on the commit hash to ensure it's unique.
          tag_name: build-${{ github.sha }}
          # Use a glob pattern to find and upload all files from the artifacts directory.
          files: artifacts/**/*
