# .github/workflows/build.yml
# This workflow builds, packages, and creates a draft release for the application on Windows (x64),
# macOS (x64, arm64), and Linux (x64, arm64).

name: Build and Release

on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "release" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      # Do not cancel other jobs if one fails
      fail-fast: false
      matrix:
        include:
          # Linux Builds
          - os: ubuntu-latest
            arch: "x64"
            runner: "ubuntu-latest"
            gradle_task: "packageReleaseDeb"
            os_name: "linux"
          - os: ubuntu-24.04-arm
            arch: "arm64"
            runner: "ubuntu-24.04-arm"
            gradle_task: "packageReleaseDeb"
            os_name: "linux"

          # macOS Builds
          - os: macos-13
            arch: "x64"
            # Explicitly use an Intel-based runner for the x64 build
            runner: "macos-13"
            gradle_task: "packageReleaseDmg packageReleasePkg"
            os_name: "macos"
          - os: macos-latest
            arch: "arm64"
            # macos-14 is an Apple Silicon runner, required for native arm64 builds.
            runner: "macos-14"
            gradle_task: "packageReleaseDmg packageReleasePkg"
            os_name: "macos"

          # Windows Builds
          - os: windows-latest
            arch: "x64"
            runner: "windows-latest"
            gradle_task: "packageReleaseMsi packageReleaseExe"
            os_name: "windows"
          - os: windows-11-arm
            arch: "arm64"
            runner: "windows-11-arm"
            gradle_task: "packageReleaseMsi packageReleaseExe"
            os_name: "windows"

    # Run on the runner specified in the matrix
    runs-on: ${{ matrix.runner }}

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the Java Development Kit (JDK) for the target architecture
      - name: Set up JDK 24 for ${{ matrix.arch }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '24'
          architecture: ${{ matrix.arch }}

      # 3. Grant execute permission to the Gradle wrapper (for macOS and Linux)
      - name: Grant execute permission for gradlew
        if: runner.os != 'Windows'
        run: chmod +x ./gradlew

      # 4. Build the application using Gradle, targeting the specific architecture
      - name: Build with Gradle on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: ./gradlew.bat -PosArch=${{ matrix.arch }} ${{ matrix.gradle_task }} packageReleaseUberJarForCurrentOS

      - name: Build with Gradle on Linux/macOS
        if: runner.os != 'Windows'
        run: ./gradlew -PosArch=${{ matrix.arch }} ${{ matrix.gradle_task }} packageReleaseUberJarForCurrentOS

      # 5. Rename the packages to include the architecture, preventing release conflicts
      - name: Rename Packages for Release
        shell: bash
        run: |
          ARTIFACT_DIR="composeApp/build/compose/binaries/main-release"
          ARCH="${{ matrix.arch }}"

          rename_files() {
            DIR_PATH="$1"
            EXT="$2"
            if [ -d "$DIR_PATH" ]; then
              for f in "$DIR_PATH"/*."$EXT"; do
                if [ -f "$f" ]; then
                  # Constructs the new name, e.g., app-1.0.0.msi -> app-1.0.0-x64.msi
                  NEW_NAME="$(basename "$f" ."$EXT")-$ARCH.$EXT"
                  echo "Renaming $f to $DIR_PATH/$NEW_NAME"
                  mv "$f" "$DIR_PATH/$NEW_NAME"
                fi
              done
            fi
          }

          # Rename only the package types that have conflicting names
          rename_files "$ARTIFACT_DIR/dmg" "dmg"
          rename_files "$ARTIFACT_DIR/pkg" "pkg"
          rename_files "$ARTIFACT_DIR/msi" "msi"
          rename_files "$ARTIFACT_DIR/exe" "exe"

      # 6. Upload the built packages as an artifact for the release job
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ runner.os }}-${{ matrix.arch }}
          path: |
            composeApp/build/compose/binaries/main-release/deb/*.deb
            composeApp/build/compose/binaries/main-release/dmg/*.dmg
            composeApp/build/compose/binaries/main-release/pkg/*.pkg
            composeApp/build/compose/binaries/main-release/msi/*.msi
            composeApp/build/compose/binaries/main-release/exe/*.exe
            composeApp/build/compose/jars/*.jar
          retention-days: 1

  release:
    # This job runs only after all jobs in the 'build' matrix have successfully completed.
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # This permission is required by softprops/action-gh-release to create a release
      contents: write

    steps:
      # 1. Check out the repository code to access the build.gradle.kts file
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Get the project version from the Gradle build file
      - name: Get Project Version
        id: get_version
        run: |
          # Extracts the version from the line 'packageVersion = "1.0.0"'
          VERSION=$(grep 'packageVersion = ' composeApp/build.gradle.kts | head -n 1 | sed -e 's/.*packageVersion = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 3. Download all artifacts from the completed build jobs
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # The destination path for all downloaded artifacts.
          # Each artifact will be in its own directory.
          path: artifacts

      # 4. Create a single Draft Release and upload all packages
      - name: Create Draft Release
        uses: softprops/action-gh-release@v2
        with:
          name: Pomolin ${{ steps.get_version.outputs.version }} Alpha
          # This creates a draft release, so it's not published automatically.
          draft: true
          # The tag name is based on the commit hash to ensure it's unique.
          tag_name: v${{ steps.get_version.outputs.version }}
          # Set the release body content, using the extracted version
          body: |
            ## Pomolin v${{ steps.get_version.outputs.version }}

            ### Description:

            Pomolin is a simple, beautiful, and minimalist Pomodoro timer for your desktop. Designed to help you stay focused and productive, it provides an elegant and straightforward way to manage your work and break intervals. With a clean interface and essential features, Pomolin helps you get into a rhythm of focused work sessions followed by refreshing breaks, all from a native desktop application.

            > Note: The app has been tested only for Linux.

            ### ðŸ“¦ Assets & Downloads:

            Download the appropriate package for your operating system and architecture below. All builds are created automatically via GitHub Actions. You can download an operating system specific package or an operating system specific jar.
            > Note: If using a jar to run the application, make sure that you are using Java 24.
          # Use a glob pattern to find and upload all files from the artifacts directory
          files: artifacts/**/*
